// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ekklesia;

namespace ekklesia.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200408184750_EventTransaction")]
    partial class EventTransaction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.Occasion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("EventType");

                    b.HasKey("Id");

                    b.ToTable("Occasions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Occasion");
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.OccasionMember", b =>
                {
                    b.Property<int>("MemberId");

                    b.Property<int>("OccasionId");

                    b.Property<int?>("BaptismId");

                    b.Property<int?>("ReunionId");

                    b.Property<int?>("SundaySchoolId");

                    b.HasKey("MemberId", "OccasionId");

                    b.HasIndex("BaptismId");

                    b.HasIndex("OccasionId");

                    b.HasIndex("ReunionId");

                    b.HasIndex("SundaySchoolId");

                    b.ToTable("OccasionMember");
                });

            modelBuilder.Entity("ekklesia.Models.MemberModel.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("PhotoPath");

                    b.Property<int>("Position");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ekklesia.Models.TransactionModel.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("OccasionId");

                    b.Property<int>("TransactionType");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("OccasionId");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.Baptism", b =>
                {
                    b.HasBaseType("ekklesia.Models.EventModel.Occasion");

                    b.Property<int>("BaptizerId");

                    b.Property<string>("Place")
                        .IsRequired();

                    b.HasIndex("BaptizerId");

                    b.HasDiscriminator().HasValue("Baptism");
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.Cell", b =>
                {
                    b.HasBaseType("ekklesia.Models.EventModel.Occasion");

                    b.Property<int>("Convertions");

                    b.HasDiscriminator().HasValue("Cell");
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.Cult", b =>
                {
                    b.HasBaseType("ekklesia.Models.EventModel.Occasion");

                    b.Property<int>("CultType");

                    b.Property<bool>("Internal");

                    b.Property<string>("MainVerse")
                        .IsRequired();

                    b.Property<int>("NumberOfPeople");

                    b.ToTable("Cults");

                    b.HasDiscriminator().HasValue("Cult");
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.Reunion", b =>
                {
                    b.HasBaseType("ekklesia.Models.EventModel.Occasion");

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("ReunionType");

                    b.Property<int>("SpeakerId");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasIndex("SpeakerId");

                    b.ToTable("Reunions");

                    b.HasDiscriminator().HasValue("Reunion");
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.SundaySchool", b =>
                {
                    b.HasBaseType("ekklesia.Models.EventModel.Occasion");

                    b.Property<int>("NumberOfBibles");

                    b.Property<int>("TeacherId");

                    b.Property<string>("Theme")
                        .IsRequired();

                    b.Property<string>("Verse")
                        .IsRequired();

                    b.HasIndex("TeacherId");

                    b.ToTable("SundaySchools");

                    b.HasDiscriminator().HasValue("SundaySchool");
                });

            modelBuilder.Entity("ekklesia.Models.TransactionModel.Expenditure", b =>
                {
                    b.HasBaseType("ekklesia.Models.TransactionModel.Transaction");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Invoice")
                        .IsRequired();

                    b.HasDiscriminator().HasValue("Expenditure");
                });

            modelBuilder.Entity("ekklesia.Models.TransactionModel.Revenue", b =>
                {
                    b.HasBaseType("ekklesia.Models.TransactionModel.Transaction");

                    b.Property<int>("RevenueType");

                    b.HasDiscriminator().HasValue("Revenue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.OccasionMember", b =>
                {
                    b.HasOne("ekklesia.Models.EventModel.Baptism")
                        .WithMany("Baptizeds")
                        .HasForeignKey("BaptismId");

                    b.HasOne("ekklesia.Models.MemberModel.Member", "Member")
                        .WithMany("Meetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ekklesia.Models.EventModel.Occasion", "Occasion")
                        .WithMany()
                        .HasForeignKey("OccasionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ekklesia.Models.EventModel.Reunion")
                        .WithMany("PresentMembers")
                        .HasForeignKey("ReunionId");

                    b.HasOne("ekklesia.Models.EventModel.SundaySchool")
                        .WithMany("Members")
                        .HasForeignKey("SundaySchoolId");
                });

            modelBuilder.Entity("ekklesia.Models.TransactionModel.Transaction", b =>
                {
                    b.HasOne("ekklesia.Models.EventModel.Occasion", "Occasion")
                        .WithMany()
                        .HasForeignKey("OccasionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.Baptism", b =>
                {
                    b.HasOne("ekklesia.Models.MemberModel.Member", "Baptizer")
                        .WithMany()
                        .HasForeignKey("BaptizerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.Reunion", b =>
                {
                    b.HasOne("ekklesia.Models.MemberModel.Member", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ekklesia.Models.EventModel.SundaySchool", b =>
                {
                    b.HasOne("ekklesia.Models.MemberModel.Member", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
